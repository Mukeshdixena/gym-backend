// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  members     Member[]
  trainers    Trainer[]
  plans       Plan[]
  classes     Class[]
  memberships Membership[]
  payments    Payment[]
  role        UserRole     @default(USER)
  status      UserStatus   @default(PENDING)
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Member {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  firstName   String
  lastName    String
  email       String
  phone       String
  address     String?
  dateOfBirth DateTime?
  memberships Membership[]
  attendances Attendance[]
  classes     Class[]      @relation("ClassMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, userId])
  @@unique([phone, userId])
  @@index([userId])
}

model Class {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  trainerId Int
  startTime DateTime
  endTime   DateTime
  members   Member[] @relation("ClassMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  plan      Plan             @relation(fields: [planId], references: [id])
  planId    Int
  member    Member           @relation(fields: [memberId], references: [id])
  memberId  Int
  startDate DateTime
  endDate   DateTime
  status    MembershipStatus @default(INACTIVE)
  payments  Payment[]
  discount  Float?           @default(0)
  paid      Float?           @default(0)
  pending   Float?           @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Plan {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  name         String
  description  String?
  price        Float
  durationDays Int
  isActive     Boolean      @default(true)
  memberships  Membership[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Trainer {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  firstName  String
  lastName   String
  email      String   @unique
  phone      String
  speciality String?
  classes    Class[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  membership   Membership    @relation(fields: [membershipId], references: [id])
  membershipId Int
  amount       Float
  paymentDate  DateTime      @default(now())
  method       PaymentMethod
}

model Attendance {
  id       Int              @id @default(autoincrement())
  user     User             @relation(fields: [userId], references: [id])
  userId   Int
  member   Member           @relation(fields: [memberId], references: [id])
  memberId Int
  date     DateTime
  status   AttendanceStatus @default(PRESENT)
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PARTIAL_PAID
  EXPIRED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  ONLINE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}
